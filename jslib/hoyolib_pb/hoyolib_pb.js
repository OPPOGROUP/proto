// source: hoyolib_pb/hoyolib.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.hoyolib.AccountInfoRequest', null, global);
goog.exportSymbol('proto.hoyolib.AccountInfoResponse', null, global);
goog.exportSymbol('proto.hoyolib.AccountInfoResponse.AccountInfo', null, global);
goog.exportSymbol('proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo', null, global);
goog.exportSymbol('proto.hoyolib.CheckInRequest', null, global);
goog.exportSymbol('proto.hoyolib.CheckInResponse', null, global);
goog.exportSymbol('proto.hoyolib.CheckInResponse.CheckInStatus', null, global);
goog.exportSymbol('proto.hoyolib.ErrorCode', null, global);
goog.exportSymbol('proto.hoyolib.GameType', null, global);
goog.exportSymbol('proto.hoyolib.RegisterRequest', null, global);
goog.exportSymbol('proto.hoyolib.RegisterRequest.AccountType', null, global);
goog.exportSymbol('proto.hoyolib.RegisterResponse', null, global);
goog.exportSymbol('proto.hoyolib.ResponseHeader', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoyolib.ResponseHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoyolib.ResponseHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hoyolib.ResponseHeader.displayName = 'proto.hoyolib.ResponseHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoyolib.RegisterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hoyolib.RegisterRequest.repeatedFields_, null);
};
goog.inherits(proto.hoyolib.RegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hoyolib.RegisterRequest.displayName = 'proto.hoyolib.RegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoyolib.RegisterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoyolib.RegisterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hoyolib.RegisterResponse.displayName = 'proto.hoyolib.RegisterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoyolib.CheckInRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hoyolib.CheckInRequest.repeatedFields_, null);
};
goog.inherits(proto.hoyolib.CheckInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hoyolib.CheckInRequest.displayName = 'proto.hoyolib.CheckInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoyolib.CheckInResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoyolib.CheckInResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hoyolib.CheckInResponse.displayName = 'proto.hoyolib.CheckInResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoyolib.CheckInResponse.CheckInStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoyolib.CheckInResponse.CheckInStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hoyolib.CheckInResponse.CheckInStatus.displayName = 'proto.hoyolib.CheckInResponse.CheckInStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoyolib.AccountInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoyolib.AccountInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hoyolib.AccountInfoRequest.displayName = 'proto.hoyolib.AccountInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoyolib.AccountInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoyolib.AccountInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hoyolib.AccountInfoResponse.displayName = 'proto.hoyolib.AccountInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoyolib.AccountInfoResponse.AccountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hoyolib.AccountInfoResponse.AccountInfo.repeatedFields_, null);
};
goog.inherits(proto.hoyolib.AccountInfoResponse.AccountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hoyolib.AccountInfoResponse.AccountInfo.displayName = 'proto.hoyolib.AccountInfoResponse.AccountInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.displayName = 'proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoyolib.ResponseHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.hoyolib.ResponseHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoyolib.ResponseHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.ResponseHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoyolib.ResponseHeader}
 */
proto.hoyolib.ResponseHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoyolib.ResponseHeader;
  return proto.hoyolib.ResponseHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoyolib.ResponseHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoyolib.ResponseHeader}
 */
proto.hoyolib.ResponseHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoyolib.ResponseHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoyolib.ResponseHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoyolib.ResponseHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.ResponseHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.hoyolib.ResponseHeader.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hoyolib.ResponseHeader} returns this
 */
proto.hoyolib.ResponseHeader.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.hoyolib.ResponseHeader.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hoyolib.ResponseHeader} returns this
 */
proto.hoyolib.ResponseHeader.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 user_id = 3;
 * @return {number}
 */
proto.hoyolib.ResponseHeader.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.hoyolib.ResponseHeader} returns this
 */
proto.hoyolib.ResponseHeader.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hoyolib.RegisterRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoyolib.RegisterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hoyolib.RegisterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoyolib.RegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.RegisterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cookieToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accountType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    gamesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoyolib.RegisterRequest}
 */
proto.hoyolib.RegisterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoyolib.RegisterRequest;
  return proto.hoyolib.RegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoyolib.RegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoyolib.RegisterRequest}
 */
proto.hoyolib.RegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCookieToken(value);
      break;
    case 3:
      var value = /** @type {!proto.hoyolib.RegisterRequest.AccountType} */ (reader.readEnum());
      msg.setAccountType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 5:
      var values = /** @type {!Array<!proto.hoyolib.GameType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addGames(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoyolib.RegisterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoyolib.RegisterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoyolib.RegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.RegisterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCookieToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccountType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getGamesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hoyolib.RegisterRequest.AccountType = {
  UNKNOWN: 0,
  OVERSEA: 1,
  CN: 2
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.hoyolib.RegisterRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hoyolib.RegisterRequest} returns this
 */
proto.hoyolib.RegisterRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cookie_token = 2;
 * @return {string}
 */
proto.hoyolib.RegisterRequest.prototype.getCookieToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hoyolib.RegisterRequest} returns this
 */
proto.hoyolib.RegisterRequest.prototype.setCookieToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AccountType account_type = 3;
 * @return {!proto.hoyolib.RegisterRequest.AccountType}
 */
proto.hoyolib.RegisterRequest.prototype.getAccountType = function() {
  return /** @type {!proto.hoyolib.RegisterRequest.AccountType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.hoyolib.RegisterRequest.AccountType} value
 * @return {!proto.hoyolib.RegisterRequest} returns this
 */
proto.hoyolib.RegisterRequest.prototype.setAccountType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 user_id = 4;
 * @return {number}
 */
proto.hoyolib.RegisterRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.hoyolib.RegisterRequest} returns this
 */
proto.hoyolib.RegisterRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated GameType games = 5;
 * @return {!Array<!proto.hoyolib.GameType>}
 */
proto.hoyolib.RegisterRequest.prototype.getGamesList = function() {
  return /** @type {!Array<!proto.hoyolib.GameType>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.hoyolib.GameType>} value
 * @return {!proto.hoyolib.RegisterRequest} returns this
 */
proto.hoyolib.RegisterRequest.prototype.setGamesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.hoyolib.GameType} value
 * @param {number=} opt_index
 * @return {!proto.hoyolib.RegisterRequest} returns this
 */
proto.hoyolib.RegisterRequest.prototype.addGames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hoyolib.RegisterRequest} returns this
 */
proto.hoyolib.RegisterRequest.prototype.clearGamesList = function() {
  return this.setGamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoyolib.RegisterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hoyolib.RegisterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoyolib.RegisterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.RegisterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.hoyolib.ResponseHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoyolib.RegisterResponse}
 */
proto.hoyolib.RegisterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoyolib.RegisterResponse;
  return proto.hoyolib.RegisterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoyolib.RegisterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoyolib.RegisterResponse}
 */
proto.hoyolib.RegisterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hoyolib.ResponseHeader;
      reader.readMessage(value,proto.hoyolib.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoyolib.RegisterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoyolib.RegisterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoyolib.RegisterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.RegisterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hoyolib.ResponseHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.hoyolib.ResponseHeader}
 */
proto.hoyolib.RegisterResponse.prototype.getHeader = function() {
  return /** @type{?proto.hoyolib.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.hoyolib.ResponseHeader, 1));
};


/**
 * @param {?proto.hoyolib.ResponseHeader|undefined} value
 * @return {!proto.hoyolib.RegisterResponse} returns this
*/
proto.hoyolib.RegisterResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hoyolib.RegisterResponse} returns this
 */
proto.hoyolib.RegisterResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hoyolib.RegisterResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hoyolib.CheckInRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoyolib.CheckInRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hoyolib.CheckInRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoyolib.CheckInRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.CheckInRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoyolib.CheckInRequest}
 */
proto.hoyolib.CheckInRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoyolib.CheckInRequest;
  return proto.hoyolib.CheckInRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoyolib.CheckInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoyolib.CheckInRequest}
 */
proto.hoyolib.CheckInRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.hoyolib.GameType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addGames(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoyolib.CheckInRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoyolib.CheckInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoyolib.CheckInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.CheckInRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGamesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.hoyolib.CheckInRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hoyolib.CheckInRequest} returns this
 */
proto.hoyolib.CheckInRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated GameType games = 2;
 * @return {!Array<!proto.hoyolib.GameType>}
 */
proto.hoyolib.CheckInRequest.prototype.getGamesList = function() {
  return /** @type {!Array<!proto.hoyolib.GameType>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.hoyolib.GameType>} value
 * @return {!proto.hoyolib.CheckInRequest} returns this
 */
proto.hoyolib.CheckInRequest.prototype.setGamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.hoyolib.GameType} value
 * @param {number=} opt_index
 * @return {!proto.hoyolib.CheckInRequest} returns this
 */
proto.hoyolib.CheckInRequest.prototype.addGames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hoyolib.CheckInRequest} returns this
 */
proto.hoyolib.CheckInRequest.prototype.clearGamesList = function() {
  return this.setGamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoyolib.CheckInResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hoyolib.CheckInResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoyolib.CheckInResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.CheckInResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.hoyolib.ResponseHeader.toObject(includeInstance, f),
    checkininfocnMap: (f = msg.getCheckininfocnMap()) ? f.toObject(includeInstance, proto.hoyolib.CheckInResponse.CheckInStatus.toObject) : [],
    checkininfooverseaMap: (f = msg.getCheckininfooverseaMap()) ? f.toObject(includeInstance, proto.hoyolib.CheckInResponse.CheckInStatus.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoyolib.CheckInResponse}
 */
proto.hoyolib.CheckInResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoyolib.CheckInResponse;
  return proto.hoyolib.CheckInResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoyolib.CheckInResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoyolib.CheckInResponse}
 */
proto.hoyolib.CheckInResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hoyolib.ResponseHeader;
      reader.readMessage(value,proto.hoyolib.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = msg.getCheckininfocnMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.hoyolib.CheckInResponse.CheckInStatus.deserializeBinaryFromReader, 0, new proto.hoyolib.CheckInResponse.CheckInStatus());
         });
      break;
    case 3:
      var value = msg.getCheckininfooverseaMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.hoyolib.CheckInResponse.CheckInStatus.deserializeBinaryFromReader, 0, new proto.hoyolib.CheckInResponse.CheckInStatus());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoyolib.CheckInResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoyolib.CheckInResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoyolib.CheckInResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.CheckInResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hoyolib.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getCheckininfocnMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.hoyolib.CheckInResponse.CheckInStatus.serializeBinaryToWriter);
  }
  f = message.getCheckininfooverseaMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.hoyolib.CheckInResponse.CheckInStatus.serializeBinaryToWriter);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoyolib.CheckInResponse.CheckInStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.hoyolib.CheckInResponse.CheckInStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoyolib.CheckInResponse.CheckInStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.CheckInResponse.CheckInStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    msg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoyolib.CheckInResponse.CheckInStatus}
 */
proto.hoyolib.CheckInResponse.CheckInStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoyolib.CheckInResponse.CheckInStatus;
  return proto.hoyolib.CheckInResponse.CheckInStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoyolib.CheckInResponse.CheckInStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoyolib.CheckInResponse.CheckInStatus}
 */
proto.hoyolib.CheckInResponse.CheckInStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoyolib.CheckInResponse.CheckInStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoyolib.CheckInResponse.CheckInStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoyolib.CheckInResponse.CheckInStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.CheckInResponse.CheckInStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.hoyolib.CheckInResponse.CheckInStatus.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hoyolib.CheckInResponse.CheckInStatus} returns this
 */
proto.hoyolib.CheckInResponse.CheckInStatus.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.hoyolib.CheckInResponse.CheckInStatus.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hoyolib.CheckInResponse.CheckInStatus} returns this
 */
proto.hoyolib.CheckInResponse.CheckInStatus.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.hoyolib.ResponseHeader}
 */
proto.hoyolib.CheckInResponse.prototype.getHeader = function() {
  return /** @type{?proto.hoyolib.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.hoyolib.ResponseHeader, 1));
};


/**
 * @param {?proto.hoyolib.ResponseHeader|undefined} value
 * @return {!proto.hoyolib.CheckInResponse} returns this
*/
proto.hoyolib.CheckInResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hoyolib.CheckInResponse} returns this
 */
proto.hoyolib.CheckInResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hoyolib.CheckInResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<int32, CheckInStatus> CheckInInfoCN = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.hoyolib.CheckInResponse.CheckInStatus>}
 */
proto.hoyolib.CheckInResponse.prototype.getCheckininfocnMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.hoyolib.CheckInResponse.CheckInStatus>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.hoyolib.CheckInResponse.CheckInStatus));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.hoyolib.CheckInResponse} returns this
 */
proto.hoyolib.CheckInResponse.prototype.clearCheckininfocnMap = function() {
  this.getCheckininfocnMap().clear();
  return this;
};


/**
 * map<int32, CheckInStatus> CheckInInfoOversea = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.hoyolib.CheckInResponse.CheckInStatus>}
 */
proto.hoyolib.CheckInResponse.prototype.getCheckininfooverseaMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.hoyolib.CheckInResponse.CheckInStatus>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.hoyolib.CheckInResponse.CheckInStatus));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.hoyolib.CheckInResponse} returns this
 */
proto.hoyolib.CheckInResponse.prototype.clearCheckininfooverseaMap = function() {
  this.getCheckininfooverseaMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoyolib.AccountInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hoyolib.AccountInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoyolib.AccountInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.AccountInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoyolib.AccountInfoRequest}
 */
proto.hoyolib.AccountInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoyolib.AccountInfoRequest;
  return proto.hoyolib.AccountInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoyolib.AccountInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoyolib.AccountInfoRequest}
 */
proto.hoyolib.AccountInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoyolib.AccountInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoyolib.AccountInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoyolib.AccountInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.AccountInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.hoyolib.AccountInfoRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hoyolib.AccountInfoRequest} returns this
 */
proto.hoyolib.AccountInfoRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoyolib.AccountInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hoyolib.AccountInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoyolib.AccountInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.AccountInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.hoyolib.ResponseHeader.toObject(includeInstance, f),
    accountInfo: (f = msg.getAccountInfo()) && proto.hoyolib.AccountInfoResponse.AccountInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoyolib.AccountInfoResponse}
 */
proto.hoyolib.AccountInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoyolib.AccountInfoResponse;
  return proto.hoyolib.AccountInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoyolib.AccountInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoyolib.AccountInfoResponse}
 */
proto.hoyolib.AccountInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hoyolib.ResponseHeader;
      reader.readMessage(value,proto.hoyolib.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.hoyolib.AccountInfoResponse.AccountInfo;
      reader.readMessage(value,proto.hoyolib.AccountInfoResponse.AccountInfo.deserializeBinaryFromReader);
      msg.setAccountInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoyolib.AccountInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoyolib.AccountInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoyolib.AccountInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.AccountInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hoyolib.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getAccountInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hoyolib.AccountInfoResponse.AccountInfo.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.hoyolib.AccountInfoResponse.AccountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoyolib.AccountInfoResponse.AccountInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameInfosList: jspb.Message.toObjectList(msg.getGameInfosList(),
    proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.toObject, includeInstance),
    isSign: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoyolib.AccountInfoResponse.AccountInfo}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoyolib.AccountInfoResponse.AccountInfo;
  return proto.hoyolib.AccountInfoResponse.AccountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoyolib.AccountInfoResponse.AccountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoyolib.AccountInfoResponse.AccountInfo}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo;
      reader.readMessage(value,proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.deserializeBinaryFromReader);
      msg.addGameInfos(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoyolib.AccountInfoResponse.AccountInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoyolib.AccountInfoResponse.AccountInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.serializeBinaryToWriter
    );
  }
  f = message.getIsSign();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo;
  return proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * repeated GameInfo game_infos = 1;
 * @return {!Array<!proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo>}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.prototype.getGameInfosList = function() {
  return /** @type{!Array<!proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo, 1));
};


/**
 * @param {!Array<!proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo>} value
 * @return {!proto.hoyolib.AccountInfoResponse.AccountInfo} returns this
*/
proto.hoyolib.AccountInfoResponse.AccountInfo.prototype.setGameInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.prototype.addGameInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hoyolib.AccountInfoResponse.AccountInfo.GameInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hoyolib.AccountInfoResponse.AccountInfo} returns this
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.prototype.clearGameInfosList = function() {
  return this.setGameInfosList([]);
};


/**
 * optional bool is_sign = 2;
 * @return {boolean}
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.prototype.getIsSign = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hoyolib.AccountInfoResponse.AccountInfo} returns this
 */
proto.hoyolib.AccountInfoResponse.AccountInfo.prototype.setIsSign = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.hoyolib.ResponseHeader}
 */
proto.hoyolib.AccountInfoResponse.prototype.getHeader = function() {
  return /** @type{?proto.hoyolib.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, proto.hoyolib.ResponseHeader, 1));
};


/**
 * @param {?proto.hoyolib.ResponseHeader|undefined} value
 * @return {!proto.hoyolib.AccountInfoResponse} returns this
*/
proto.hoyolib.AccountInfoResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hoyolib.AccountInfoResponse} returns this
 */
proto.hoyolib.AccountInfoResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hoyolib.AccountInfoResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccountInfo account_info = 2;
 * @return {?proto.hoyolib.AccountInfoResponse.AccountInfo}
 */
proto.hoyolib.AccountInfoResponse.prototype.getAccountInfo = function() {
  return /** @type{?proto.hoyolib.AccountInfoResponse.AccountInfo} */ (
    jspb.Message.getWrapperField(this, proto.hoyolib.AccountInfoResponse.AccountInfo, 2));
};


/**
 * @param {?proto.hoyolib.AccountInfoResponse.AccountInfo|undefined} value
 * @return {!proto.hoyolib.AccountInfoResponse} returns this
*/
proto.hoyolib.AccountInfoResponse.prototype.setAccountInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hoyolib.AccountInfoResponse} returns this
 */
proto.hoyolib.AccountInfoResponse.prototype.clearAccountInfo = function() {
  return this.setAccountInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hoyolib.AccountInfoResponse.prototype.hasAccountInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.hoyolib.ErrorCode = {
  OK: 0,
  INVALID_REQUEST_PARAM: 10000,
  ERROR_CREATE_USER: 10001,
  ERROR_USER_NOT_REGISTER: 10002,
  ERROR_CHECK_IN: 10003
};

/**
 * @enum {number}
 */
proto.hoyolib.GameType = {
  UNKNOWN_GAME: 0,
  GENSHIN: 1000,
  STARRAIL: 1001
};

goog.object.extend(exports, proto.hoyolib);
